/*****************************************************************************
 * Made in cloudy Seattle
 *
 * (C) Copyright 2019 @LunarBadge (https://lunarbadge.github.io/)
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this code or extend it, please let us know!
 *
 * Contributors:
 *  @nofullname
 * 
 *****************************************************************************/

#include "lunarlandergame.h"

// moon altitude above "zero" at every point (512 points).
const std::vector<short> LunarLanderGame::altitudes =
{
    55, 55, 55, 55, 55, 53, 53, 53, 53, 53, 51, 51, 51, 44, 44, 44, 
    35, 35, 30, 30, 29, 30, 30, 30, 28, 28, 23, 23, 21, 21, 20, 20, 
    19, 19, 19, 19, 19, 19, 20, 20, 21, 22, 23, 23, 24, 25, 26, 26, 
    27, 27, 27, 28, 28, 28, 28, 29, 31, 31, 33, 33, 35, 35, 36, 36, 
    36, 36, 36, 36, 39, 39, 39, 39, 40, 40, 40, 40, 42, 42, 42, 42, 
    42, 42, 42, 42, 41, 41, 41, 41, 39, 37, 37, 37, 35, 33, 33, 33, 
    31, 29, 29, 29, 27, 27, 27, 27, 27, 27, 27, 31, 31, 31, 32, 32, 
    32, 31, 30, 30, 29, 29, 24, 24, 23, 23, 23, 23, 22, 15, 15, 15, 
    6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 
    6, 6, 6, 6, 8, 8, 10, 10, 11, 11, 12, 12, 14, 14, 15, 15, 
    15, 15, 20, 20, 24, 24, 24, 24, 25, 25, 25, 25, 27, 27, 27, 27, 
    30, 30, 30, 30, 35, 35, 40, 40, 40, 40, 42, 42, 44, 46, 47, 47, 
    48, 48, 48, 48, 48, 48, 48, 48, 50, 50, 52, 52, 54, 54, 56, 57, 
    57, 62, 62, 74, 79, 83, 83, 85, 85, 85, 85, 86, 88, 88, 88, 90, 
    90, 90, 90, 90, 88, 88, 88, 88, 88, 86, 86, 86, 86, 86, 85, 85, 
    84, 83, 83, 78, 78, 78, 78, 78, 78, 76, 74, 74, 72, 72, 69, 66, 
    66, 66, 66, 65, 65, 64, 64, 63, 61, 61, 61, 59, 57, 57, 57, 55, 
    55, 55, 55, 55, 48, 48, 48, 39, 39, 39, 39, 39, 37, 37, 37, 35, 
    35, 30, 30, 28, 28, 27, 27, 26, 19, 19, 19, 10, 8, 8, 8, 6, 
    6, 6, 6, 6, 6, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 1, 1, 1, 6, 6, 11, 11, 11, 13, 13, 16, 16, 16, 17, 
    17, 19, 19, 21, 21, 21, 21, 22, 22, 22, 22, 24, 24, 24, 24, 24, 
    22, 22, 22, 22, 22, 20, 13, 13, 13, 11, 11, 10, 10, 9, 9, 8, 
    8, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 2, 2, 14, 14, 14, 14, 14, 14, 19, 19, 20, 20, 21, 21, 23, 
    25, 26, 26, 27, 27, 27, 27, 27, 27, 33, 33, 38, 38, 38, 38, 39, 
    39, 38, 38, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 39, 
    43, 45, 45, 48, 48, 48, 48, 49, 51, 52, 52, 53, 53, 54, 54, 55,
};

// note: y = 0 is the bottom of the screen (there's a 10 px buffer).
const std::vector<LandingZone> LunarLanderGame::landingZones =
{
    {  0,  55,  5, 4, "4x"},
    { 62,  36,  6, 3, "3x"},
    {132,   4,  9, 2, "2x"},
    {192,  48,  5, 5, "5x"},
    {224,  90,  5, 4, "4x"},
    {272,  55,  4, 5, "5x"},
    {304,   6,  5, 5, "5x"},
    {432,   0, 16, 2, "2x"},
};

// Random collections of landing zones.  Each is a bitmap with 4 landing zones selected.
const std::vector<short> LunarLanderGame::lzCollection =
{
    75, 172, 226, 45, 216, 77, 15, 232,
    78, 228, 240, 184, 60, 163, 114, 57,
};

const std::vector<std::pair<short, short>> LunarLanderGame::flatBits =
{
    {32, 6}, {62, 6}, {76, 8}, {100, 7}, {132, 10}, {192, 8}, {243, 6},{303, 9},
    {319, 34}, {379, 5}, {384, 5}, {401, 6}, {407, 16}, {423, 8}, {431, 18},{451, 6},
    {467, 6}, {483, 10}, {511, 6}
};

// star locations (generated by a spreadsheet).  These are world coordinates.
const std::vector<GeoPoint> LunarLanderGame::stars =
{   
    {312, 148}, {369,  97}, {173,  92}, { 10, 111}, {162, 147}, {267,  95}, {377, 231}, {271, 236},
    {182, 160}, {156, 193}, { 95, 195}, {110, 107}, {337, 162}, {  9,  99}, {220, 205}, {447, 182},
    {265, 198}, { 99,  74}, {174, 161}, {194, 105}, { 86, 109}, {191, 234}, {220,  87}, {418,  76},
    { 74, 175}, {271, 146}, {255, 122}, {422, 226}, {504, 203}, {451,  72}, {184, 239}, {510, 231}, 
};

// when we scroll up, these are the visible stars (there is a 256 pixel vertical wrap).
const std::vector<GeoPoint> LunarLanderGame::highStars =
{
    {482, 117}, {214, 193}, {443, 252}, {479, 188}, {303,  67}, { 82, 148}, {109, 71}, {425,  47},
    { 82, 182}, {147, 192}, {  1, 195}, { 18, 143}, {216,  63}, {296, 125}, { 66, 76}, {437, 176},
    { 88, 188}, {121, 101}, {335,   2}, { 34, 101}, {509, 197}, {113, 205}, { 55, 34}, {436, 239},
    {107,  17}, { 15, 106}, {257, 142}, {  8,  94}, {344,  35}, { 53, 164}, {470, 23}, {225, 252},
};

// there are 16 possible angles and this defines the points we could draw the lander at.  Generated by spreadsheet.
const std::vector<LanderPoints> LunarLanderGame::landerOffsets =
{
    {12, -6, 6, 6, 6, -8, 8, 8, 8, -8, 10, -6, 10, 8, 10, 6, 10, -6, 12, 6, 12, 0, 16},
    {12, -8, 3, 3, 8, -10, 4, 4, 10, -11, 6, -9, 7, 4, 12, 2, 12, -10, 9, 1, 13, -6, 15},
    {12, -8, 0, 0, 8, -11, 0, 0, 11, -13, 1, -11, 3, -1, 13, -3, 11, -13, 4, -4, 13, -11, 11},
    {11, -8, -3, -3, 8, -10, -4, -4, 10, -12, -4, -12, -2, -6, 11, -7, 9, -13, -1, -9, 10, -15, 6},
    {10, -6, -6, -6, 6, -8, -8, -8, 8, -10, -8, -10, -6, -10, 8, -10, 6, -12, -6, -12, 6, -16, 0},
    {10, -3, -8, -8, 3, -4, -10, -10, 4, -6, -11, -7, -9, -12, 4, -12, 2, -9, -10, -13, 1, -15, -6},
    {8, 0, -8, -8, 0, 0, -11, -11, 0, -1, -13, -3, -11, -13, -1, -11, -3, -4, -13, -13, -4, -11, -11},
    {6, 3, -8, -8, -3, 4, -10, -10, -4, 4, -12, 2, -12, -11, -6, -9, -7, 1, -13, -10, -9, -6, -15},
    {6, 6, -6, -6, -6, 8, -8, -8, -8, 8, -10, 6, -10, -8, -10, -6, -10, 6, -12, -6, -12, 0, -16},
    {6, 8, -3, -3, -8, 10, -4, -4, -10, 11, -6, 9, -7, -4, -12, -2, -12, 10, -9, -1, -13, 6, -15},
    {8, 8, 0, 0, -8, 11, 0, 0, -11, 13, -1, 11, -3, 1, -13, 3, -11, 13, -4, 4, -13, 11, -11},
    {10, 8, 3, 3, -8, 10, 4, 4, -10, 12, 4, 12, 2, 6, -11, 7, -9, 13, 1, 9, -10, 15, -6},
    {11, 6, 6, 6, -6, 8, 8, 8, -8, 10, 8, 10, 6, 10, -8, 10, -6, 12, 6, 12, -6, 16, 0},
    {12, 3, 8, 8, -3, 4, 10, 10, -4, 6, 11, 7, 9, 12, -4, 12, -2, 9, 10, 13, -1, 15, 6},
    {12, 0, 8, 8, 0, 0, 11, 11, 0, 1, 13, 3, 11, 13, 1, 11, 3, 4, 13, 13, 4, 11, 11},
    {12, -3, 8, 8, 3, -4, 10, 10, 4, -4, 12, -2, 12, 11, 6, 9, 7, -1, 13, 10, 9, 6, 15},
    
// same at regular scale
    {6, -3, 3, 3, 3, -4, 4, 4, 4, -4, 5, -3, 5, 4, 5, 3, 5, -3, 6, 3, 6, 0, 8},
    {6, -4, 2, 2, 4, -5, 2, 2, 5, -6, 3, -5, 3, 2, 6, 1, 6, -5, 4, 0, 7, -3, 7},
    {6, -4, 0, 0, 4, -6, 0, 0, 6, -6, 1, -6, 1, -1, 6, -1, 6, -6, 2, -2, 6, -6, 6},
    {5, -4, -2, -2, 4, -5, -2, -2, 5, -6, -2, -6, -1, -3, 6, -3, 5, -7, 0, -4, 5, -7, 3},
    {4, -3, -3, -3, 3, -4, -4, -4, 4, -5, -4, -5, -3, -5, 4, -5, 3, -6, -3, -6, 3, -8, 0},
    {4, -2, -4, -4, 2, -2, -5, -5, 2, -3, -6, -3, -5, -6, 2, -6, 1, -4, -5, -7, 0, -7, -3},
    {3, 0, -4, -4, 0, 0, -6, -6, 0, -1, -6, -1, -6, -6, -1, -6, -1, -2, -6, -6, -2, -6, -6},
    {3, 2, -4, -4, -2, 2, -5, -5, -2, 2, -6, 1, -6, -6, -3, -5, -3, 0, -7, -5, -4, -3, -7},
    {3, 3, -3, -3, -3, 4, -4, -4, -4, 4, -5, 3, -5, -4, -5, -3, -5, 3, -6, -3, -6, 0, -8},
    {3, 4, -2, -2, -4, 5, -2, -2, -5, 6, -3, 5, -3, -2, -6, -1, -6, 5, -4, 0, -7, 3, -7},
    {3, 4, 0, 0, -4, 6, 0, 0, -6, 6, -1, 6, -1, 1, -6, 1, -6, 6, -2, 2, -6, 6, -6},
    {4, 4, 2, 2, -4, 5, 2, 2, -5, 6, 2, 6, 1, 3, -6, 3, -5, 7, 0, 4, -5, 7, -3},
    {5, 3, 3, 3, -3, 4, 4, 4, -4, 5, 4, 5, 3, 5, -4, 5, -3, 6, 3, 6, -3, 8, 0},
    {5, 2, 4, 4, -2, 2, 5, 5, -2, 3, 6, 3, 5, 6, -2, 6, -1, 4, 5, 7, 0, 7, 3},
    {5, 0, 4, 4, 0, 0, 6, 6, 0, 1, 6, 1, 6, 6, 1, 6, 1, 2, 6, 6, 2, 6, 6},
    {6, -2, 4, 4, 2, -2, 5, 5, 2, -2, 6, -1, 6, 6, 3, 5, 3, 0, 7, 5, 4, 3, 7},
};

// delta vx, vy for each angle (there are 16).  pre-calculates sin(theta) + cos(theta), from a spreadsheet.
const std::vector<Velocity> TheEagle::deltav =
{
    {   0,  100}, { 38,  92}, { 71,  71}, { 92,  38}, { 100, 0}, { 92, -38}, { 71, -71}, { 38, -92},
    {   0, -100}, {-38, -92}, {-71, -71}, {-92, -38}, {-100, 0}, {-92,  38}, {-71,  71}, {-38,  92},
};

//restartButton = 0, buttonA, buttonB, buttonC, buttonD,
std::map<ButtonKeys, Debouncer> buttonDebouncer =
{
  { restartButton, {0, 0, 0, 0, 0, RESTART_PIN } },
  { buttonA, {0, 0, 0, 0, 0, BUTTON_ONE_PIN } },
  { buttonB, {0, 0, 0, 0, 0, BUTTON_TWO_PIN } },
  { buttonC, {0, 0, 0, 0, 0, BUTTON_THREE_PIN } },
  { buttonD, {0, 0, 0, 0, 0, BUTTON_FOUR_PIN } },
};

const std::vector<Triangle> LunarLanderGame::explosionTriangles =
{
    { {-5, 0}, {0, 13}, {5, 0} },
    { {-5, 0}, {0, -12}, {5, 0} },
    { {0, -10}, {11, 0}, {0, 10} },
    { {0, -10}, {-11, 0}, {0, 10} },
    { {-5, 0}, {8, 9}, {5, 0} },
    { {-5, 0}, {7, -9}, {5, 0} },
    { {0, -10}, {-6, 9}, {0, 10} },
    { {0, -10}, {-8, -8}, {0, 10} },
};

